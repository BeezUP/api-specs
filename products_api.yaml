swagger: '2.0'
info:
  version: '0.2'
  title: DRAFT - Products API
  description: |
    DRAFT - Products API

  contact: 
   email: johnny@beezup.com
   url: Point BeezUP on Teams
   name: Johnny KNOBLAUCH



tags:
- name: Products
  description: Product management


paths: 


 '/merchant/products/v1/{storeId}/batches/{actionType}':
    post:
      tags:
        - Products
      summary: Push product batches
      description: | 
        The importation will automatically start if one of the following condition occured:
        - after 5 minutes delay, 
        - when you reach 100 batches
        - when you are touching more than 100K products
      parameters:
        - $ref: '#/parameters/storeIdInPath'
        - name: actionType
          in: path
          required: true
          type: string
          format: productActionType
        - name: request
          in: body
          required: true
          schema:
             $ref: '#/definitions/productList'
      responses:
        202:
          $ref: '#/responses/202_Import_Operation_Request_Accepted'
        400:
          $ref: '#/responses/400_Request_Invalid'
        404:
          $ref: '#/responses/404_Store_NotFound'
        default:
          $ref: "#/responses/GeneralError"





responses:




  202_Import_Operation_Request_Accepted:
    description: Request accepted
    headers:
      X-BEEZUP-PRODUCT-IMPORTATION-ID:
        type: string
        format: ImportationId
        description: The product importation identifier
      X-BEEZUP-PRODUCT-IMPORTATION-BATCH-ID:
        type: string
        format: ImportationId
        description: The product importation identifier

  400_Request_Invalid:
    description: The request is invalid
    schema:
      $ref: "#/definitions/errorResponseMessage"

  404_Store_NotFound:
    description: The store is not found
    schema:
      $ref: "#/definitions/errorResponseMessage"

  404_Product_NotFound:
    description: The product is not found
    schema:
      $ref: "#/definitions/errorResponseMessage"

  404_Store_NotFound:
    description: The store id is not found
    schema:
      $ref: "#/definitions/errorResponseMessage"
      




  GeneralError:
    description: Occurs when something goes wrong
    schema:
      $ref: "#/definitions/errorResponseMessage"


parameters:

  skuInPath:
    name: sku
    required: true
    in: path
    type: string
    format: Sku

  storeIdInPath:
    name: storeId
    in: path
    required: true
    type: string
    format: StoreId



  productImportationIdInPath:
    name: importationId
    in: path
    required: true
    type: string
    format: ProductImportationId

definitions:






  docUrl:
    x-exclude: true
    type: string
    format: string
    description: The documentation related to this operation.
    example: https://api-docs.beezup.com/#operation/EnableChannelCatalog

  userErrorMessage:
    type: object
    x-exclude: true
    required:
    - code
    - message
    properties:
      docUrl:
        $ref: "#/definitions/docUrl"
      code:
        type: string
        description: the error code. The error code can be a pattern containing the
          argument's name
        example: CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)
      message:
        type: string
        description: The error message
        example: 'There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527'

  errorResponseMessage:
    x-exclude: true
    type: object
    required:
    - errors
    properties:
      errors:
        type: array
        uniqueItems: false
        minLength: 1
        items:
          $ref: "#/definitions/userErrorMessage"


  productList:
    type: array
    minItems: 1
    maxItems: 1000
    uniqueItems: true
    items:
      $ref: '#/definitions/product'




  productFields:
    type: array
    minItems: 1
    maxItems: 1000
    items:
      $ref: '#/definitions/productField'

  product:
    type: object
    description: The product size must not be bigger than 2MB
    required: 
    - sku
    properties:
      sku:
        $ref: '#/definitions/sku'
      fields:
        $ref: '#/definitions/productFields'

  productField:
    type: object
    description: If the value is null the property will be remove from the product
    required:
      - name
    properties: 
      name:
        $ref: '#/definitions/productFieldName'
      value:
        $ref: '#/definitions/productFieldValue'


  productFieldName:
    type: string
    description: Product field name
    maxLength: 250

  productFieldValue:
    type: string
    description: Product field value
    maxLength: 1000000

  productImportationId:
    type: string
    format: uuid
    description: The product importation identifier

  sku:
    type: string
    maxLength: 250
    description: The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku

  productActionType:
    type: string
    description: |
      Values:
      - REPLACE: Add or replace the existing product. If there is any custom column already declared on the catalog, the custom columns computation will be applied on the fly based on the product properties provided in the message
      - MERGE: Update the product properties of the existing product.
              You cannot remove a product property using this action type, you must using REPLACE action type for that. 
              If there is any custom column already declared on the catalog, the custom columns computation will be applied on the fly based on the product properties provided in the message if it's possible or asynchronously.
      - DELETE: Simply delete the product
    enum:
    - REPLACE
    - MERGE
    - DELETE
